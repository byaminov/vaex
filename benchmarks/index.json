{"project": "vaex", "project_url": "https://vaex.io/", "show_commit_url": "http://github.com/vaexio/vaex/commit/", "hash_length": 8, "revision_to_hash": {"126": "aa9912f1f5496d9f1128a477a7553b2aab3cb1c0", "147": "fa4b977c27c3449c27554a07bac156e6fd5c55f0", "169": "fb128a74f80fea6b8234ab903ef264933b23cbbd", "185": "4c65930ea944b70532a7fec043890e501c4a2711", "229": "540b61ae799ab1d3e9662e5ba9815378147790e9", "239": "708a4e7a060c2894ab9258468b7cd9327d8546cd", "324": "e22bdd3380ba805bce62167dda3ec20148d3666f", "359": "238d3208a3a36cac4ea172a085bd93d4546b0111", "360": "a0a39db089a8f213c1b60d9d8b7862a5902c047d", "361": "80ced075062848c996431048cf53b4bf541acef3", "363": "533b1e5432159848e1015065aa97ed0518da9077", "383": "c2b4ba50653ccac2f3ecc787b6290a967a289421", "384": "e5fae30df9534cd8e43c19546e382a212eed3c7a", "467": "84cf21c8dcb134bb58c3c0489bfb554a99356a9f", "506": "5ac2b83c5aae836a9dbbfaffdeb5055d37368b9c", "521": "8bdaf7e97dd10b061cda8f30c1a02caff5d87140", "523": "3f93a7bce572cf9ccd8c0d5f6ef56134ea21893b", "641": "140884ac1b15d016af5332ca616ac46430f18379", "665": "3574d2b47e0b28992606e8a17a0e77993a102639", "859": "1611c5f0ea8268c80e1f2ca04efefad353dc7f24", "964": "98dd0a87ee45e0f1d41079c0879a871505a5b8b1", "1025": "951ed2230ced7ef3e9aa5b684dba5d1e4614f091", "1249": "94f83c2b1617f48bdc3ece1d1e541d071d14c124", "1251": "e13756202e68098e1d00e5f3d31c80e4cd95c273", "1302": "49e31b8dce29a95561ff81dde02066a6661810ec", "1330": "0c3425f0d2ced3f69c15742aad4c38b729128cdf", "1335": "cf8ca1afa7c2e8781013096c54b9ebce6cc684ae", "1338": "503248718d46f068766c204aabe262c984b476b4", "1477": "8000e982b4bccdf38fb23fa4c7d2dbf940af2662", "1479": "b900630341d6a4604df0d844daa146db2325805b", "1481": "5dd25d56ef2b4cb8d5495a684306b640fc7b8bdd", "1510": "38e078b32bd7ba77f47129583c01edfdef7cb7d4", "1521": "798b843c2237979e4e157637f305d73496d4a03a", "1532": "18e09cecb87cc18c34d9af89d31e5ba7d7fe3fba", "1533": "0c4cf44acc8410326845a67058099287dd629e6c", "1545": "a67da903e803beaaade95419d7e078cb016057f3", "1547": "bed83b5b51a649ff9fd15969521fed94dfaca9b9", "1548": "d649a25560879f896f1f8e41a8967e3a98d49ada", "1551": "e9a57203475c368c836c863191bc44caa56ea373", "1574": "f2c74a96306c2e801ac8dcec7cbfefa593f02c79", "1580": "54abf7c8bf7bfb772c65fe664c27e0a360c123b7", "1584": "a7cfc4df55b10553720dbc7f0cfa70a71c5c9d8d", "1602": "44bf336264e78a0aab62787208fc9292f593e9ec", "1629": "0b2c3f4ccf5af72b64be0373af7853ad835c6abc", "1674": "fcacd0dbfb45d7ac41c62ac844664dd9c53e0f97", "1679": "d136dca316633472f74b4fd53ff5a9e51ce68acb", "1688": "7c40c2d05694a97ce5f47f20d32e41ce47ee4257", "1691": "699851788701892abedbc4fcb401c489a2fecd7b", "1698": "cf1fa58aeb3ed686aad57238d9a60db981cae30c", "1701": "6e79a5c68695599663e7fea3d0dd6140dc92cadb", "1738": "3db5c6b7ec5f12579fa8ef70f902e4ef294a09bc", "1753": "f63de3ee6935daea09de22f7fe90c3e66d3fc781", "1775": "fae4083f766fcb3e93eb44745b09546af255fcf7", "1781": "55950ff9bf427ee139380bb3dbf8ca9593a454c5", "1800": "3169ec14d7f6b66560e5d28be96d53501bea9e9f", "1801": "d2751e45e2818ac241ce92fe6ece8936de374d21", "1808": "0272da6a4c4fd44f0d13dcae543be04ecc6e523b", "1817": "79276745f0ab0b4fbc470bd367a7018f57ef2256", "1818": "a05f2f8f9204eb98df782ac3d730d8da23c72325", "1895": "64795110dc03fd977f7fe95b193db59f9436b582", "1897": "3f14285f5addcf6771d5279f400a7d642c8d3205", "1899": "10d3baa2cbc1d680b8748e27e0c3dc9eedd1406a", "1900": "eb7f94804d5a8fdf97a3a54dc20457516fb6e3eb", "1921": "e4c9d66be6b56a5e76f2f28758229545443ded4c", "1923": "76499b066f1f0deab01b30152b6608cf4253005d", "1938": "c87f55b7efedff02e7f9aa38cc7d9d34badbc888", "1948": "98b04f76bfe58d104fcd3f4d7d3418babf0deddb", "2107": "4281b93ad219faecb38534f31d3b46e963fd8252", "2110": "e1bf60bca5f1648877c5fb57a2e0637d423bcc54", "2111": "317e463aeee732999319e4dcc2a6ea3425c6afd0", "2112": "01a01f213698a7b4b9d9a818ee543d0fa821e992", "2113": "bea954b13f91bf509c2bcf6193085af614594c68", "2114": "72095993101a04b3873d40d4a0d11c54df4acba7", "2116": "3d5ea240405f7493bf6fbd777760fd7517e8b397", "2117": "e509ed042710cc0dfb4121df963a3e8c2fbfdd16", "2154": "a757b9ff4cc54c7cb1a999c84b6a85152a47bee8", "2155": "2b72e36fc9f05b8188a281c398276965969ffb96", "2712": "192b812ac1c9fbdefbb89a987d93b35ca83a5729", "2756": "0f1fe359637ce6b27f863c07a0dd79435c9e066e", "2758": "a39f969a4e2492e0e48602d7e2d50216c1594bfb"}, "revision_to_date": {"126": 1409301614000, "147": 1410856824000, "169": 1412348284000, "185": 1414760918000, "229": 1424719541000, "239": 1425069780000, "324": 1445415327000, "359": 1445503561000, "360": 1445506206000, "361": 1445506906000, "363": 1445507750000, "383": 1446150526000, "384": 1446151232000, "467": 1448978806000, "506": 1450805006000, "521": 1452788577000, "523": 1453122873000, "641": 1462964568000, "665": 1464966562000, "859": 1473878933000, "964": 1476557943000, "1025": 1477424819000, "1249": 1490907110000, "1251": 1491077410000, "1302": 1506623196000, "1330": 1506883574000, "1335": 1506937810000, "1338": 1506940164000, "1477": 1508919122000, "1479": 1508920270000, "1481": 1508927514000, "1510": 1512064687000, "1521": 1512646042000, "1532": 1513276502000, "1533": 1513279754000, "1545": 1513362462000, "1547": 1513365257000, "1548": 1513365520000, "1551": 1513365745000, "1574": 1515003620000, "1580": 1515093669000, "1584": 1515096109000, "1602": 1515437880000, "1629": 1522163454000, "1674": 1524257050000, "1679": 1524555206000, "1688": 1524562299000, "1691": 1524590891000, "1698": 1524591533000, "1701": 1524743840000, "1738": 1526639710000, "1753": 1527619375000, "1775": 1537967017000, "1781": 1539246553000, "1800": 1541079399000, "1801": 1541079581000, "1808": 1541706223000, "1817": 1542188527000, "1818": 1542188767000, "1895": 1544564221000, "1897": 1544564375000, "1899": 1544564483000, "1900": 1544564643000, "1921": 1544648864000, "1923": 1544648974000, "1938": 1544862284000, "1948": 1545656378000, "2107": 1554299261000, "2110": 1554299502000, "2111": 1554299593000, "2112": 1554299748000, "2113": 1554299931000, "2114": 1554300428000, "2116": 1554301559000, "2117": 1554303102000, "2154": 1554924714000, "2155": 1554924758000, "2712": 1585400614000, "2756": 1587989774000, "2758": 1587990867000}, "params": {"arch": ["x86_64"], "cpu": ["Intel(R) Core(TM) i7-8750H CPU @ 2.20GHz"], "machine": ["vaex-laptop"], "num_cpu": ["12"], "os": ["pop-os"], "ram": ["32GB"], "python": ["3.7"], "astropy": [""], "bqplot": ["0.12.6"], "catboost": [""], "certifi": ["2019.6.16"], "cython": [""], "graphene": ["2.1.8"], "graphene-tornado": ["2.6.1"], "graphviz": [""], "h5py": [""], "ipyleaflet": ["0.12.3"], "ipympl": ["0.5.6"], "ipyvolume": ["0.5.2"], "libcxx": ["9.0.0"], "lightgbm": [""], "matplotlib": [""], "notebook": [""], "numba": [""], "numexpr": [""], "numpy": [""], "pandas": [""], "pcre": [""], "pip": [""], "pip+aplus": [""], "pip+cachetools": [""], "pip+future": ["0.18.2"], "pip+futures": ["3.1.1"], "pip+ipyvuetify": [""], "pip+pillow": [""], "pip+progressbar2": [""], "pip+psutil": ["5.6.7"], "pip+python-dateutil": ["2.8.0"], "pip+pyyaml": [""], "pip+requests": [""], "pip+s3fs": ["0.2.2"], "py-xgboost": [""], "pyarrow": ["0.15.1"], "pyopengl": [""], "pyqt": [""], "pytest": [""], "python-graphviz": [""], "runipy": [""], "scikit-learn": [""], "scipy": [""], "setuptools": ["42.0.2"], "tornado": [""], "branch": ["master"]}, "graph_param_list": [{"arch": "x86_64", "cpu": "Intel(R) Core(TM) i7-8750H CPU @ 2.20GHz", "machine": "vaex-laptop", "num_cpu": "12", "os": "pop-os", "ram": "32GB", "python": "3.7", "astropy": "", "bqplot": "0.12.6", "catboost": "", "certifi": "2019.6.16", "cython": "", "graphene": "2.1.8", "graphene-tornado": "2.6.1", "graphviz": "", "h5py": "", "ipyleaflet": "0.12.3", "ipympl": "0.5.6", "ipyvolume": "0.5.2", "libcxx": "9.0.0", "lightgbm": "", "matplotlib": "", "notebook": "", "numba": "", "numexpr": "", "numpy": "", "pandas": "", "pcre": "", "pip": "", "pip+aplus": "", "pip+cachetools": "", "pip+future": "0.18.2", "pip+futures": "3.1.1", "pip+ipyvuetify": "", "pip+pillow": "", "pip+progressbar2": "", "pip+psutil": "5.6.7", "pip+python-dateutil": "2.8.0", "pip+pyyaml": "", "pip+requests": "", "pip+s3fs": "0.2.2", "py-xgboost": "", "pyarrow": "0.15.1", "pyopengl": "", "pyqt": "", "pytest": "", "python-graphviz": "", "runipy": "", "scikit-learn": "", "scipy": "", "setuptools": "42.0.2", "tornado": "", "branch": "master"}], "benchmarks": {"aggregates.BinBy1d.time_count_star": {"code": "class BinBy1d:\n    def time_count_star(self, N):\n        self.df.count()\n\nclass Aggregates:\n    def setup(self, N):\n        self.df = vaex.open(generate_numerical())[:N]\n        self.df.categorize(self.df.i8_10, list(range(5, 15)), check=False)\n        self.df.categorize(self.df.i4_10, list(range(5, 15)), check=False)\n        self.df.categorize(self.df.i2_10, list(range(5, 15)), check=False)\n        self.df.categorize(self.df.i1_10, list(range(5, 15)), check=False)\n\n    def setup_cache(self):\n        # ensure the dataframe is generated\n        generate_numerical()", "min_run_count": 2, "name": "aggregates.BinBy1d.time_count_star", "number": 0, "param_names": ["N"], "params": [["10000000", "100000000", "500000000", "1000000000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "setup_cache_key": "/home/github/vaex/benchmarks/aggregates.py:13", "timeout": 60.0, "type": "time", "unit": "seconds", "version": "1", "warmup_time": -1}, "aggregates.BinBy1d.time_count_star_binby128": {"code": "class BinBy1d:\n    def time_count_star_binby128(self, N):\n        self.df.count(binby='x', limits=[-1, 1], shape=128)\n\nclass Aggregates:\n    def setup(self, N):\n        self.df = vaex.open(generate_numerical())[:N]\n        self.df.categorize(self.df.i8_10, list(range(5, 15)), check=False)\n        self.df.categorize(self.df.i4_10, list(range(5, 15)), check=False)\n        self.df.categorize(self.df.i2_10, list(range(5, 15)), check=False)\n        self.df.categorize(self.df.i1_10, list(range(5, 15)), check=False)\n\n    def setup_cache(self):\n        # ensure the dataframe is generated\n        generate_numerical()", "min_run_count": 2, "name": "aggregates.BinBy1d.time_count_star_binby128", "number": 0, "param_names": ["N"], "params": [["10000000", "100000000", "500000000", "1000000000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "setup_cache_key": "/home/github/vaex/benchmarks/aggregates.py:13", "timeout": 60.0, "type": "time", "unit": "seconds", "version": "1", "warmup_time": -1}, "aggregates.BinBy1d.time_count_x_binby128": {"code": "class BinBy1d:\n    def time_count_x_binby128(self, N):\n        self.df.count('x', binby='x', limits=[-1, 1], shape=128)\n\nclass Aggregates:\n    def setup(self, N):\n        self.df = vaex.open(generate_numerical())[:N]\n        self.df.categorize(self.df.i8_10, list(range(5, 15)), check=False)\n        self.df.categorize(self.df.i4_10, list(range(5, 15)), check=False)\n        self.df.categorize(self.df.i2_10, list(range(5, 15)), check=False)\n        self.df.categorize(self.df.i1_10, list(range(5, 15)), check=False)\n\n    def setup_cache(self):\n        # ensure the dataframe is generated\n        generate_numerical()", "min_run_count": 2, "name": "aggregates.BinBy1d.time_count_x_binby128", "number": 0, "param_names": ["N"], "params": [["10000000", "100000000", "500000000", "1000000000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "setup_cache_key": "/home/github/vaex/benchmarks/aggregates.py:13", "timeout": 60.0, "type": "time", "unit": "seconds", "version": "1", "warmup_time": -1}, "aggregates.BinBy2d.time_count_star": {"code": "class BinBy2d:\n    def time_count_star(self, N):\n        self.df.count(binby=[self.df.x, self.df.y], limits=[-1, -1], shape=128)\n\nclass Aggregates:\n    def setup(self, N):\n        self.df = vaex.open(generate_numerical())[:N]\n        self.df.categorize(self.df.i8_10, list(range(5, 15)), check=False)\n        self.df.categorize(self.df.i4_10, list(range(5, 15)), check=False)\n        self.df.categorize(self.df.i2_10, list(range(5, 15)), check=False)\n        self.df.categorize(self.df.i1_10, list(range(5, 15)), check=False)\n\n    def setup_cache(self):\n        # ensure the dataframe is generated\n        generate_numerical()", "min_run_count": 2, "name": "aggregates.BinBy2d.time_count_star", "number": 0, "param_names": ["N"], "params": [["10000000", "100000000", "500000000", "1000000000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "setup_cache_key": "/home/github/vaex/benchmarks/aggregates.py:13", "timeout": 60.0, "type": "time", "unit": "seconds", "version": "1", "warmup_time": -1}, "aggregates.BinBy2d.time_count_star_x4": {"code": "class BinBy2d:\n    def time_count_star_x4(self, N):\n        self.df.count(binby=[self.df.x4, self.df.y4], limits=[-1, -1], shape=128)\n\nclass Aggregates:\n    def setup(self, N):\n        self.df = vaex.open(generate_numerical())[:N]\n        self.df.categorize(self.df.i8_10, list(range(5, 15)), check=False)\n        self.df.categorize(self.df.i4_10, list(range(5, 15)), check=False)\n        self.df.categorize(self.df.i2_10, list(range(5, 15)), check=False)\n        self.df.categorize(self.df.i1_10, list(range(5, 15)), check=False)\n\n    def setup_cache(self):\n        # ensure the dataframe is generated\n        generate_numerical()", "min_run_count": 2, "name": "aggregates.BinBy2d.time_count_star_x4", "number": 0, "param_names": ["N"], "params": [["10000000", "100000000", "500000000", "1000000000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "setup_cache_key": "/home/github/vaex/benchmarks/aggregates.py:13", "timeout": 60.0, "type": "time", "unit": "seconds", "version": "1", "warmup_time": -1}, "aggregates.BinByCat10.time_binby_iB_10": {"code": "class BinByCat10:\n    def time_binby_iB_10(self, N, B):\n        self.df.count(binby=f'i{B}_10')\n\n    def setup(self, N, B):\n        super().setup(N)\n\nclass Aggregates:\n    def setup_cache(self):\n        # ensure the dataframe is generated\n        generate_numerical()", "min_run_count": 2, "name": "aggregates.BinByCat10.time_binby_iB_10", "number": 0, "param_names": ["N", "B"], "params": [["10000000", "100000000", "500000000", "1000000000"], ["1", "2", "4", "8"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "setup_cache_key": "/home/github/vaex/benchmarks/aggregates.py:13", "timeout": 60.0, "type": "time", "unit": "seconds", "version": "1", "warmup_time": -1}, "aggregates.BinByCat1K.time_binby_iB_1K": {"code": "class BinByCat1K:\n    def time_binby_iB_1K(self, N, B):\n        self.df.count(binby=f'i{B}_1K')\n\n    def setup(self, N, B):\n        super().setup(N)\n\nclass Aggregates:\n    def setup_cache(self):\n        # ensure the dataframe is generated\n        generate_numerical()", "min_run_count": 2, "name": "aggregates.BinByCat1K.time_binby_iB_1K", "number": 0, "param_names": ["N", "B"], "params": [["10000000", "100000000", "500000000", "1000000000"], ["2", "4", "8"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "setup_cache_key": "/home/github/vaex/benchmarks/aggregates.py:13", "timeout": 60.0, "type": "time", "unit": "seconds", "version": "1", "warmup_time": -1}, "aggregates.BinByCat1M.time_binby_iB_1K": {"code": "class BinByCat1M:\n    def time_binby_iB_1K(self, N, B):\n        self.df.count(binby=f'i{B}_1M')\n\n    def setup(self, N, B):\n        super().setup(N)\n\nclass Aggregates:\n    def setup_cache(self):\n        # ensure the dataframe is generated\n        generate_numerical()", "min_run_count": 2, "name": "aggregates.BinByCat1M.time_binby_iB_1K", "number": 0, "param_names": ["N", "B"], "params": [["10000000", "100000000", "500000000", "1000000000"], ["4", "8"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "setup_cache_key": "/home/github/vaex/benchmarks/aggregates.py:13", "timeout": 60.0, "type": "time", "unit": "seconds", "version": "1", "warmup_time": -1}, "aggregates.Stats.time_count_star": {"code": "class Stats:\n    def time_count_star(self, N):\n        self.df.count()\n\nclass Aggregates:\n    def setup(self, N):\n        self.df = vaex.open(generate_numerical())[:N]\n        self.df.categorize(self.df.i8_10, list(range(5, 15)), check=False)\n        self.df.categorize(self.df.i4_10, list(range(5, 15)), check=False)\n        self.df.categorize(self.df.i2_10, list(range(5, 15)), check=False)\n        self.df.categorize(self.df.i1_10, list(range(5, 15)), check=False)\n\n    def setup_cache(self):\n        # ensure the dataframe is generated\n        generate_numerical()", "min_run_count": 2, "name": "aggregates.Stats.time_count_star", "number": 0, "param_names": ["N"], "params": [["10000000", "100000000", "500000000", "1000000000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "setup_cache_key": "/home/github/vaex/benchmarks/aggregates.py:13", "timeout": 60.0, "type": "time", "unit": "seconds", "version": "1", "warmup_time": -1}, "aggregates.Stats.time_mean_x": {"code": "class Stats:\n    def time_mean_x(self, N):\n        self.df.x.mean()\n\nclass Aggregates:\n    def setup(self, N):\n        self.df = vaex.open(generate_numerical())[:N]\n        self.df.categorize(self.df.i8_10, list(range(5, 15)), check=False)\n        self.df.categorize(self.df.i4_10, list(range(5, 15)), check=False)\n        self.df.categorize(self.df.i2_10, list(range(5, 15)), check=False)\n        self.df.categorize(self.df.i1_10, list(range(5, 15)), check=False)\n\n    def setup_cache(self):\n        # ensure the dataframe is generated\n        generate_numerical()", "min_run_count": 2, "name": "aggregates.Stats.time_mean_x", "number": 0, "param_names": ["N"], "params": [["10000000", "100000000", "500000000", "1000000000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "setup_cache_key": "/home/github/vaex/benchmarks/aggregates.py:13", "timeout": 60.0, "type": "time", "unit": "seconds", "version": "1", "warmup_time": -1}, "aggregates.Stats.time_mean_x4": {"code": "class Stats:\n    def time_mean_x4(self, N):\n        self.df.x4.mean()\n\nclass Aggregates:\n    def setup(self, N):\n        self.df = vaex.open(generate_numerical())[:N]\n        self.df.categorize(self.df.i8_10, list(range(5, 15)), check=False)\n        self.df.categorize(self.df.i4_10, list(range(5, 15)), check=False)\n        self.df.categorize(self.df.i2_10, list(range(5, 15)), check=False)\n        self.df.categorize(self.df.i1_10, list(range(5, 15)), check=False)\n\n    def setup_cache(self):\n        # ensure the dataframe is generated\n        generate_numerical()", "min_run_count": 2, "name": "aggregates.Stats.time_mean_x4", "number": 0, "param_names": ["N"], "params": [["10000000", "100000000", "500000000", "1000000000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "setup_cache_key": "/home/github/vaex/benchmarks/aggregates.py:13", "timeout": 60.0, "type": "time", "unit": "seconds", "version": "1", "warmup_time": -1}, "strings.Strings.time_capitalize": {"code": "class Strings:\n    def time_capitalize(self, N):\n        self.df.s.str.capitalize().nop()\n\n    def setup(self, N):\n        partitions = 24\n        df = vaex.open(generate_strings())\n        df_vaex = df[0:int(N)]\n        df_vaex.executor.buffer_size = len(df_vaex) // partitions\n        self.df = df_vaex\n\n    def setup_cache(self):\n        # ensure the dataframe is generated\n        generate_strings()", "min_run_count": 2, "name": "strings.Strings.time_capitalize", "number": 0, "param_names": ["N"], "params": [["10000000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "setup_cache_key": "/home/github/vaex/benchmarks/strings.py:16", "timeout": 3600, "type": "time", "unit": "seconds", "version": "1", "warmup_time": -1}, "strings.Strings.time_cat": {"code": "class Strings:\n    def time_cat(self, N):\n        self.df.s.str.cat(self.df.s).nop()\n\n    def setup(self, N):\n        partitions = 24\n        df = vaex.open(generate_strings())\n        df_vaex = df[0:int(N)]\n        df_vaex.executor.buffer_size = len(df_vaex) // partitions\n        self.df = df_vaex\n\n    def setup_cache(self):\n        # ensure the dataframe is generated\n        generate_strings()", "min_run_count": 2, "name": "strings.Strings.time_cat", "number": 0, "param_names": ["N"], "params": [["10000000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "setup_cache_key": "/home/github/vaex/benchmarks/strings.py:16", "timeout": 3600, "type": "time", "unit": "seconds", "version": "1", "warmup_time": -1}, "strings.Strings.time_contains": {"code": "class Strings:\n    def time_contains(self, N):\n        self.df.s.str.contains(\"9\", regex=False).nop()\n\n    def setup(self, N):\n        partitions = 24\n        df = vaex.open(generate_strings())\n        df_vaex = df[0:int(N)]\n        df_vaex.executor.buffer_size = len(df_vaex) // partitions\n        self.df = df_vaex\n\n    def setup_cache(self):\n        # ensure the dataframe is generated\n        generate_strings()", "min_run_count": 2, "name": "strings.Strings.time_contains", "number": 0, "param_names": ["N"], "params": [["10000000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "setup_cache_key": "/home/github/vaex/benchmarks/strings.py:16", "timeout": 3600, "type": "time", "unit": "seconds", "version": "1", "warmup_time": -1}, "strings.Strings.time_contains_regex": {"code": "class Strings:\n    def time_contains_regex(self, N):\n        self.df.s.str.contains(\"9\", regex=True).nop()\n\n    def setup(self, N):\n        partitions = 24\n        df = vaex.open(generate_strings())\n        df_vaex = df[0:int(N)]\n        df_vaex.executor.buffer_size = len(df_vaex) // partitions\n        self.df = df_vaex\n\n    def setup_cache(self):\n        # ensure the dataframe is generated\n        generate_strings()", "min_run_count": 2, "name": "strings.Strings.time_contains_regex", "number": 0, "param_names": ["N"], "params": [["10000000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "setup_cache_key": "/home/github/vaex/benchmarks/strings.py:16", "timeout": 3600, "type": "time", "unit": "seconds", "version": "1", "warmup_time": -1}, "strings.Strings.time_count": {"code": "class Strings:\n    def time_count(self, N):\n        self.df.s.str.count(\"9\").nop()\n\n    def setup(self, N):\n        partitions = 24\n        df = vaex.open(generate_strings())\n        df_vaex = df[0:int(N)]\n        df_vaex.executor.buffer_size = len(df_vaex) // partitions\n        self.df = df_vaex\n\n    def setup_cache(self):\n        # ensure the dataframe is generated\n        generate_strings()", "min_run_count": 2, "name": "strings.Strings.time_count", "number": 0, "param_names": ["N"], "params": [["10000000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "setup_cache_key": "/home/github/vaex/benchmarks/strings.py:16", "timeout": 3600, "type": "time", "unit": "seconds", "version": "1", "warmup_time": -1}, "strings.Strings.time_endswith": {"code": "class Strings:\n    def time_endswith(self, N):\n        self.df.s.str.endswith(\"9\").nop()\n\n    def setup(self, N):\n        partitions = 24\n        df = vaex.open(generate_strings())\n        df_vaex = df[0:int(N)]\n        df_vaex.executor.buffer_size = len(df_vaex) // partitions\n        self.df = df_vaex\n\n    def setup_cache(self):\n        # ensure the dataframe is generated\n        generate_strings()", "min_run_count": 2, "name": "strings.Strings.time_endswith", "number": 0, "param_names": ["N"], "params": [["10000000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "setup_cache_key": "/home/github/vaex/benchmarks/strings.py:16", "timeout": 3600, "type": "time", "unit": "seconds", "version": "1", "warmup_time": -1}, "strings.Strings.time_find": {"code": "class Strings:\n    def time_find(self, N):\n        self.df.s.str.find(\"4\").nop()\n\n    def setup(self, N):\n        partitions = 24\n        df = vaex.open(generate_strings())\n        df_vaex = df[0:int(N)]\n        df_vaex.executor.buffer_size = len(df_vaex) // partitions\n        self.df = df_vaex\n\n    def setup_cache(self):\n        # ensure the dataframe is generated\n        generate_strings()", "min_run_count": 2, "name": "strings.Strings.time_find", "number": 0, "param_names": ["N"], "params": [["10000000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "setup_cache_key": "/home/github/vaex/benchmarks/strings.py:16", "timeout": 3600, "type": "time", "unit": "seconds", "version": "1", "warmup_time": -1}, "strings.Strings.time_get": {"code": "class Strings:\n    def time_get(self, N):\n        self.df.s.str.get(1).nop()\n\n    def setup(self, N):\n        partitions = 24\n        df = vaex.open(generate_strings())\n        df_vaex = df[0:int(N)]\n        df_vaex.executor.buffer_size = len(df_vaex) // partitions\n        self.df = df_vaex\n\n    def setup_cache(self):\n        # ensure the dataframe is generated\n        generate_strings()", "min_run_count": 2, "name": "strings.Strings.time_get", "number": 0, "param_names": ["N"], "params": [["10000000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "setup_cache_key": "/home/github/vaex/benchmarks/strings.py:16", "timeout": 3600, "type": "time", "unit": "seconds", "version": "1", "warmup_time": -1}, "strings.Strings.time_len": {"code": "class Strings:\n    def time_len(self, N):\n        self.df.s.str.len().nop()\n\n    def setup(self, N):\n        partitions = 24\n        df = vaex.open(generate_strings())\n        df_vaex = df[0:int(N)]\n        df_vaex.executor.buffer_size = len(df_vaex) // partitions\n        self.df = df_vaex\n\n    def setup_cache(self):\n        # ensure the dataframe is generated\n        generate_strings()", "min_run_count": 2, "name": "strings.Strings.time_len", "number": 0, "param_names": ["N"], "params": [["10000000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "setup_cache_key": "/home/github/vaex/benchmarks/strings.py:16", "timeout": 3600, "type": "time", "unit": "seconds", "version": "1", "warmup_time": -1}, "strings.Strings.time_ljust": {"code": "class Strings:\n    def time_ljust(self, N):\n        self.df.s.str.ljust(10).nop()\n\n    def setup(self, N):\n        partitions = 24\n        df = vaex.open(generate_strings())\n        df_vaex = df[0:int(N)]\n        df_vaex.executor.buffer_size = len(df_vaex) // partitions\n        self.df = df_vaex\n\n    def setup_cache(self):\n        # ensure the dataframe is generated\n        generate_strings()", "min_run_count": 2, "name": "strings.Strings.time_ljust", "number": 0, "param_names": ["N"], "params": [["10000000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "setup_cache_key": "/home/github/vaex/benchmarks/strings.py:16", "timeout": 3600, "type": "time", "unit": "seconds", "version": "1", "warmup_time": -1}, "strings.Strings.time_lower": {"code": "class Strings:\n    def time_lower(self, N):\n        self.df.s.str.lower().nop()\n\n    def setup(self, N):\n        partitions = 24\n        df = vaex.open(generate_strings())\n        df_vaex = df[0:int(N)]\n        df_vaex.executor.buffer_size = len(df_vaex) // partitions\n        self.df = df_vaex\n\n    def setup_cache(self):\n        # ensure the dataframe is generated\n        generate_strings()", "min_run_count": 2, "name": "strings.Strings.time_lower", "number": 0, "param_names": ["N"], "params": [["10000000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "setup_cache_key": "/home/github/vaex/benchmarks/strings.py:16", "timeout": 3600, "type": "time", "unit": "seconds", "version": "1", "warmup_time": -1}, "strings.Strings.time_lstrip": {"code": "class Strings:\n    def time_lstrip(self, N):\n        self.df.s.str.lstrip(\"9\").nop()\n\n    def setup(self, N):\n        partitions = 24\n        df = vaex.open(generate_strings())\n        df_vaex = df[0:int(N)]\n        df_vaex.executor.buffer_size = len(df_vaex) // partitions\n        self.df = df_vaex\n\n    def setup_cache(self):\n        # ensure the dataframe is generated\n        generate_strings()", "min_run_count": 2, "name": "strings.Strings.time_lstrip", "number": 0, "param_names": ["N"], "params": [["10000000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "setup_cache_key": "/home/github/vaex/benchmarks/strings.py:16", "timeout": 3600, "type": "time", "unit": "seconds", "version": "1", "warmup_time": -1}, "strings.Strings.time_match": {"code": "class Strings:\n    def time_match(self, N):\n        self.df.s.str.match(\"1.*\").nop()\n\n    def setup(self, N):\n        partitions = 24\n        df = vaex.open(generate_strings())\n        df_vaex = df[0:int(N)]\n        df_vaex.executor.buffer_size = len(df_vaex) // partitions\n        self.df = df_vaex\n\n    def setup_cache(self):\n        # ensure the dataframe is generated\n        generate_strings()", "min_run_count": 2, "name": "strings.Strings.time_match", "number": 0, "param_names": ["N"], "params": [["10000000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "setup_cache_key": "/home/github/vaex/benchmarks/strings.py:16", "timeout": 3600, "type": "time", "unit": "seconds", "version": "1", "warmup_time": -1}, "strings.Strings.time_pad": {"code": "class Strings:\n    def time_pad(self, N):\n        self.df.s.str.pad(10).nop()\n\n    def setup(self, N):\n        partitions = 24\n        df = vaex.open(generate_strings())\n        df_vaex = df[0:int(N)]\n        df_vaex.executor.buffer_size = len(df_vaex) // partitions\n        self.df = df_vaex\n\n    def setup_cache(self):\n        # ensure the dataframe is generated\n        generate_strings()", "min_run_count": 2, "name": "strings.Strings.time_pad", "number": 0, "param_names": ["N"], "params": [["10000000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "setup_cache_key": "/home/github/vaex/benchmarks/strings.py:16", "timeout": 3600, "type": "time", "unit": "seconds", "version": "1", "warmup_time": -1}, "strings.Strings.time_repeat": {"code": "class Strings:\n    def time_repeat(self, N):\n        self.df.s.str.repeat(2).nop()\n\n    def setup(self, N):\n        partitions = 24\n        df = vaex.open(generate_strings())\n        df_vaex = df[0:int(N)]\n        df_vaex.executor.buffer_size = len(df_vaex) // partitions\n        self.df = df_vaex\n\n    def setup_cache(self):\n        # ensure the dataframe is generated\n        generate_strings()", "min_run_count": 2, "name": "strings.Strings.time_repeat", "number": 0, "param_names": ["N"], "params": [["10000000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "setup_cache_key": "/home/github/vaex/benchmarks/strings.py:16", "timeout": 3600, "type": "time", "unit": "seconds", "version": "1", "warmup_time": -1}, "strings.Strings.time_replace_default": {"code": "class Strings:\n    def time_replace_default(self, N):\n        self.df.s.str.replace(\"123\", \"321\").nop()\n\n    def setup(self, N):\n        partitions = 24\n        df = vaex.open(generate_strings())\n        df_vaex = df[0:int(N)]\n        df_vaex.executor.buffer_size = len(df_vaex) // partitions\n        self.df = df_vaex\n\n    def setup_cache(self):\n        # ensure the dataframe is generated\n        generate_strings()", "min_run_count": 2, "name": "strings.Strings.time_replace_default", "number": 0, "param_names": ["N"], "params": [["10000000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "setup_cache_key": "/home/github/vaex/benchmarks/strings.py:16", "timeout": 3600, "type": "time", "unit": "seconds", "version": "1", "warmup_time": -1}, "strings.Strings.time_replace_no_regex": {"code": "class Strings:\n    def time_replace_no_regex(self, N):\n        self.df.s.str.replace(\"123\", \"321\", regex=False).nop()\n\n    def setup(self, N):\n        partitions = 24\n        df = vaex.open(generate_strings())\n        df_vaex = df[0:int(N)]\n        df_vaex.executor.buffer_size = len(df_vaex) // partitions\n        self.df = df_vaex\n\n    def setup_cache(self):\n        # ensure the dataframe is generated\n        generate_strings()", "min_run_count": 2, "name": "strings.Strings.time_replace_no_regex", "number": 0, "param_names": ["N"], "params": [["10000000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "setup_cache_key": "/home/github/vaex/benchmarks/strings.py:16", "timeout": 3600, "type": "time", "unit": "seconds", "version": "1", "warmup_time": -1}, "strings.Strings.time_replace_regex": {"code": "class Strings:\n    def time_replace_regex(self, N):\n        self.df.s.str.replace(\"1?[45]4\", \"1004\", regex=True).nop()\n\n    def setup(self, N):\n        partitions = 24\n        df = vaex.open(generate_strings())\n        df_vaex = df[0:int(N)]\n        df_vaex.executor.buffer_size = len(df_vaex) // partitions\n        self.df = df_vaex\n\n    def setup_cache(self):\n        # ensure the dataframe is generated\n        generate_strings()", "min_run_count": 2, "name": "strings.Strings.time_replace_regex", "number": 0, "param_names": ["N"], "params": [["10000000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "setup_cache_key": "/home/github/vaex/benchmarks/strings.py:16", "timeout": 3600, "type": "time", "unit": "seconds", "version": "1", "warmup_time": -1}, "strings.Strings.time_rfind": {"code": "class Strings:\n    def time_rfind(self, N):\n        self.df.s.str.rfind(\"4\").nop()\n\n    def setup(self, N):\n        partitions = 24\n        df = vaex.open(generate_strings())\n        df_vaex = df[0:int(N)]\n        df_vaex.executor.buffer_size = len(df_vaex) // partitions\n        self.df = df_vaex\n\n    def setup_cache(self):\n        # ensure the dataframe is generated\n        generate_strings()", "min_run_count": 2, "name": "strings.Strings.time_rfind", "number": 0, "param_names": ["N"], "params": [["10000000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "setup_cache_key": "/home/github/vaex/benchmarks/strings.py:16", "timeout": 3600, "type": "time", "unit": "seconds", "version": "1", "warmup_time": -1}, "strings.Strings.time_rjust": {"code": "class Strings:\n    def time_rjust(self, N):\n        self.df.s.str.rjust(10).nop()\n\n    def setup(self, N):\n        partitions = 24\n        df = vaex.open(generate_strings())\n        df_vaex = df[0:int(N)]\n        df_vaex.executor.buffer_size = len(df_vaex) // partitions\n        self.df = df_vaex\n\n    def setup_cache(self):\n        # ensure the dataframe is generated\n        generate_strings()", "min_run_count": 2, "name": "strings.Strings.time_rjust", "number": 0, "param_names": ["N"], "params": [["10000000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "setup_cache_key": "/home/github/vaex/benchmarks/strings.py:16", "timeout": 3600, "type": "time", "unit": "seconds", "version": "1", "warmup_time": -1}, "strings.Strings.time_rstrip": {"code": "class Strings:\n    def time_rstrip(self, N):\n        self.df.s.str.rstrip(\"9\").nop()\n\n    def setup(self, N):\n        partitions = 24\n        df = vaex.open(generate_strings())\n        df_vaex = df[0:int(N)]\n        df_vaex.executor.buffer_size = len(df_vaex) // partitions\n        self.df = df_vaex\n\n    def setup_cache(self):\n        # ensure the dataframe is generated\n        generate_strings()", "min_run_count": 2, "name": "strings.Strings.time_rstrip", "number": 0, "param_names": ["N"], "params": [["10000000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "setup_cache_key": "/home/github/vaex/benchmarks/strings.py:16", "timeout": 3600, "type": "time", "unit": "seconds", "version": "1", "warmup_time": -1}, "strings.Strings.time_slice": {"code": "class Strings:\n    def time_slice(self, N):\n        self.df.s.str.slice(1, 3).nop()\n\n    def setup(self, N):\n        partitions = 24\n        df = vaex.open(generate_strings())\n        df_vaex = df[0:int(N)]\n        df_vaex.executor.buffer_size = len(df_vaex) // partitions\n        self.df = df_vaex\n\n    def setup_cache(self):\n        # ensure the dataframe is generated\n        generate_strings()", "min_run_count": 2, "name": "strings.Strings.time_slice", "number": 0, "param_names": ["N"], "params": [["10000000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "setup_cache_key": "/home/github/vaex/benchmarks/strings.py:16", "timeout": 3600, "type": "time", "unit": "seconds", "version": "1", "warmup_time": -1}, "strings.Strings.time_split": {"code": "class Strings:\n    def time_split(self, N):\n        self.df.s.str.split(\".\").nop()\n\n    def setup(self, N):\n        partitions = 24\n        df = vaex.open(generate_strings())\n        df_vaex = df[0:int(N)]\n        df_vaex.executor.buffer_size = len(df_vaex) // partitions\n        self.df = df_vaex\n\n    def setup_cache(self):\n        # ensure the dataframe is generated\n        generate_strings()", "min_run_count": 2, "name": "strings.Strings.time_split", "number": 0, "param_names": ["N"], "params": [["10000000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "setup_cache_key": "/home/github/vaex/benchmarks/strings.py:16", "timeout": 3600, "type": "time", "unit": "seconds", "version": "1", "warmup_time": -1}, "strings.Strings.time_split_and_join": {"code": "class Strings:\n    def time_split_and_join(self, N):\n        self.df.s.str.split(\".\").str.join(\"-\").nop()\n\n    def setup(self, N):\n        partitions = 24\n        df = vaex.open(generate_strings())\n        df_vaex = df[0:int(N)]\n        df_vaex.executor.buffer_size = len(df_vaex) // partitions\n        self.df = df_vaex\n\n    def setup_cache(self):\n        # ensure the dataframe is generated\n        generate_strings()", "min_run_count": 2, "name": "strings.Strings.time_split_and_join", "number": 0, "param_names": ["N"], "params": [["10000000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "setup_cache_key": "/home/github/vaex/benchmarks/strings.py:16", "timeout": 3600, "type": "time", "unit": "seconds", "version": "1", "warmup_time": -1}, "strings.Strings.time_startswith": {"code": "class Strings:\n    def time_startswith(self, N):\n        self.df.s.str.startswith(\"9\").nop()\n\n    def setup(self, N):\n        partitions = 24\n        df = vaex.open(generate_strings())\n        df_vaex = df[0:int(N)]\n        df_vaex.executor.buffer_size = len(df_vaex) // partitions\n        self.df = df_vaex\n\n    def setup_cache(self):\n        # ensure the dataframe is generated\n        generate_strings()", "min_run_count": 2, "name": "strings.Strings.time_startswith", "number": 0, "param_names": ["N"], "params": [["10000000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "setup_cache_key": "/home/github/vaex/benchmarks/strings.py:16", "timeout": 3600, "type": "time", "unit": "seconds", "version": "1", "warmup_time": -1}, "strings.Strings.time_strip": {"code": "class Strings:\n    def time_strip(self, N):\n        self.df.s.str.strip(\"0\").nop()\n\n    def setup(self, N):\n        partitions = 24\n        df = vaex.open(generate_strings())\n        df_vaex = df[0:int(N)]\n        df_vaex.executor.buffer_size = len(df_vaex) // partitions\n        self.df = df_vaex\n\n    def setup_cache(self):\n        # ensure the dataframe is generated\n        generate_strings()", "min_run_count": 2, "name": "strings.Strings.time_strip", "number": 0, "param_names": ["N"], "params": [["10000000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "setup_cache_key": "/home/github/vaex/benchmarks/strings.py:16", "timeout": 3600, "type": "time", "unit": "seconds", "version": "1", "warmup_time": -1}, "strings.Strings.time_title": {"code": "class Strings:\n    def time_title(self, N):\n        self.df.s.str.title().nop()\n\n    def setup(self, N):\n        partitions = 24\n        df = vaex.open(generate_strings())\n        df_vaex = df[0:int(N)]\n        df_vaex.executor.buffer_size = len(df_vaex) // partitions\n        self.df = df_vaex\n\n    def setup_cache(self):\n        # ensure the dataframe is generated\n        generate_strings()", "min_run_count": 2, "name": "strings.Strings.time_title", "number": 0, "param_names": ["N"], "params": [["10000000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "setup_cache_key": "/home/github/vaex/benchmarks/strings.py:16", "timeout": 3600, "type": "time", "unit": "seconds", "version": "1", "warmup_time": -1}, "strings.Strings.time_upper": {"code": "class Strings:\n    def time_upper(self, N):\n        self.df.s.str.upper().nop()\n\n    def setup(self, N):\n        partitions = 24\n        df = vaex.open(generate_strings())\n        df_vaex = df[0:int(N)]\n        df_vaex.executor.buffer_size = len(df_vaex) // partitions\n        self.df = df_vaex\n\n    def setup_cache(self):\n        # ensure the dataframe is generated\n        generate_strings()", "min_run_count": 2, "name": "strings.Strings.time_upper", "number": 0, "param_names": ["N"], "params": [["10000000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "setup_cache_key": "/home/github/vaex/benchmarks/strings.py:16", "timeout": 3600, "type": "time", "unit": "seconds", "version": "1", "warmup_time": -1}, "strings.Strings.time_zfill": {"code": "class Strings:\n    def time_zfill(self, N):\n        self.df.s.str.zfill(10).nop()\n\n    def setup(self, N):\n        partitions = 24\n        df = vaex.open(generate_strings())\n        df_vaex = df[0:int(N)]\n        df_vaex.executor.buffer_size = len(df_vaex) // partitions\n        self.df = df_vaex\n\n    def setup_cache(self):\n        # ensure the dataframe is generated\n        generate_strings()", "min_run_count": 2, "name": "strings.Strings.time_zfill", "number": 0, "param_names": ["N"], "params": [["10000000"]], "processes": 2, "repeat": 0, "sample_time": 0.01, "setup_cache_key": "/home/github/vaex/benchmarks/strings.py:16", "timeout": 3600, "type": "time", "unit": "seconds", "version": "1", "warmup_time": -1}}, "machines": {"vaex-laptop": {"arch": "x86_64", "cpu": "Intel(R) Core(TM) i7-8750H CPU @ 2.20GHz", "machine": "vaex-laptop", "num_cpu": "12", "os": "pop-os", "ram": "32GB", "version": 1}}, "tags": {"0.3.10": 239, "0.5.0-alpha": 359, "0.5.0-alpha.1": 360, "0.5.0-alpha.2": 360, "0.5.0-alpha.3": 361, "0.5.0-alpha.4": 363, "0.5.0-alpha.5": 383, "0.5.0-alpha.6": 384, "0.5.0-alpha.7": 467, "0.5.0-alpha.9": 506, "1.0.0-alpha.1": 521, "1.0.0-alpha.2": 523, "1.0.0-alpha.3": 641, "1.0.0-beta.1": 665, "1.0.0-beta.2": 859, "1.0.0-beta.3": 964, "1.0.0-beta.4": 1025, "1.0.0-beta.5": 1249, "1.0.0-beta.6": 1251, "arrow-v0.1.0": 1801, "arrow-v0.2.0": 1948, "arrow-v0.3.0": 2117, "arrow-v0.3.1": 2155, "astro-v0.1.5": 1510, "astro-v0.2.0": 1674, "astro-v0.3.0": 1897, "astro-v0.4.0": 2111, "core-v0.1.0": 1302, "core-v0.1.0-beta.0": 1302, "core-v0.1.0-beta.1": 1302, "core-v0.1.1": 1302, "core-v0.1.2": 1302, "core-v0.1.3": 1335, "core-v0.1.4": 1477, "core-v0.1.5": 1479, "core-v0.1.6": 1510, "core-v0.1.7": 1521, "core-v0.1.8": 1574, "core-v0.3.0": 1674, "core-v0.3.1": 1688, "core-v0.3.2": 1698, "core-v0.4.0": 1738, "core-v0.4.1": 1775, "core-v0.4.2": 1800, "core-v0.4.3": 1808, "core-v0.4.4": 1818, "core-v0.5.0": 1895, "core-v0.5.1": 1899, "core-v0.6.0": 1921, "core-v0.6.1": 1938, "core-v0.7.0": 2114, "core-v0.7.1": 2116, "core-v0.7.2": 2154, "distributed-v0.1.0": 1532, "distributed-v0.2.0": 1674, "distributed-v0.3.0": 2107, "hdf5-v0.1.0": 1330, "hdf5-v0.1.1": 1302, "hdf5-v0.1.2": 1330, "hdf5-v0.1.3": 1330, "hdf5-v0.1.4": 1338, "hdf5-v0.2.0": 1674, "hdf5-v0.2.1": 1738, "hdf5-v0.3.0": 1900, "hdf5-v0.4.0": 2112, "jupyter-v0.1.0": 1532, "jupyter-v0.1.1": 1602, "jupyter-v0.2.0": 1674, "jupyter-v0.2.1": 1753, "jupyter-v0.2.2": 1817, "jupyter-v0.2.3": 1923, "meta-v1.0.0-beta+6": 1545, "meta-v1.0.0-beta+7": 1547, "meta-v1.0.0-beta.7": 1548, "meta-v1.0.0-beta.8": 1551, "server-v0.1.1": 1510, "server-v0.1.2": 1533, "server-v0.2.0": 1674, "server-v0.2.1": 1679, "ui-v0.1.5": 1510, "ui-v0.1.6": 1580, "ui-v0.1.7": 1584, "ui-v0.2.0": 1674, "ui-v0.2.1": 1781, "ui-v0.2.2": 2110, "v0.1.6": 126, "v0.1.7": 147, "v0.1.8": 169, "v0.2": 185, "v0.3": 229, "v0.4": 324, "vaexpaper_v1": 1629, "viz-v0.1.0": 1479, "viz-v0.1.1": 1481, "viz-v0.1.2": 1510, "viz-v0.1.3": 1521, "viz-v0.2.0": 1674, "viz-v0.2.1": 1691, "viz-v0.2.2": 1701, "viz-v0.3.0": 1738, "viz-v0.3.1": 1781, "viz-v0.3.2": 1923, "viz-v0.3.3": 2113}, "pages": [["", "Grid view", "Display as a agrid"], ["summarylist", "List view", "Display as a list"], ["regressions", "Show regressions", "Display information about recent regressions"]]}